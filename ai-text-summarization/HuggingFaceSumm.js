import axios from 'axios';

// ================================ Design % Implementation =========================================
async function summarizeWithHuggingFace(text) {
  const apiKey = 'YOUR_HUGGINGFACE_API_KEY';
  const modelEndpoint = 'https://api-inference.huggingface.co/models/facebook/bart-large-cnn';

  try {
    const response = await axios.post(modelEndpoint, {
      inputs: text,
    }, {
      headers: {
        Authorization: `Bearer ${apiKey}`,
      },
    });

    return response.data[0].summary_text;
  } catch (error) {
    console.error("Error summarizing with Hugging Face:", error);
    return null;
  }
}

// Usage
const text = "John Doe is a software engineer with a deep understanding of JavaScript, Python, and modern web frameworks...";
summarizeWithHuggingFace(text).then(console.log);

// ================================ Testing =========================================

const mock = new MockAdapter(axios);

describe('summarizeWithHuggingFace', () => {
  const mockSummary = "This is a summary generated by Hugging Face.";

  beforeEach(() => {
    mock.reset();
  });

  it('should return a summary when provided with text', async () => {
    const text = "John Doe is a software engineer with a deep understanding of JavaScript, Python, and modern web frameworks...";

    mock.onPost('https://api-inference.huggingface.co/models/facebook/bart-large-cnn').reply(200, [
      { summary_text: mockSummary }
    ]);

    const summary = await summarizeWithHuggingFace(text);
    expect(summary).toBe(mockSummary);
  });

  it('should handle errors gracefully', async () => {
    mock.onPost('https://api-inference.huggingface.co/models/facebook/bart-large-cnn').reply(500);

    const summary = await summarizeWithHuggingFace("Some text");
    expect(summary).toBeNull();
  });
});
