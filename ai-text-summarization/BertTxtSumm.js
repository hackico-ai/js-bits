import SummarizerManager from 'bert-summarizer';

// ================================ Design % Implementation =========================================
async function summarizeWithBert(text) {
  try {
    const summarizer = new SummarizerManager();
    const summary = await summarizer.summarize(text);
    return summary;
  } catch (error) {
    console.error("Error summarizing with BERT:", error);
    return null;
  }
}

// Usage
const cvText = "John Doe is a software engineer with expertise in JavaScript and cloud technologies...";
summarizeWithBert(text).then(console.log);

// ================================ Testing =========================================


jest.mock('bert-summarizer');

describe('summarizeWithBert', () => {
  const mockSummary = "This is a summary generated by BERT.";

  beforeEach(() => {
    SummarizerManager.mockImplementation(() => {
      return {
        summarize: jest.fn().mockResolvedValue(mockSummary),
      };
    });
  });

  it('should return a summary when provided with text', async () => {
    const text = "John Doe is a software engineer with expertise in JavaScript and cloud technologies...";
    const summary = await summarizeWithBert(text);
    expect(summary).toBe(mockSummary);
  });

  it('should handle errors gracefully', async () => {
    SummarizerManager.mockImplementationOnce(() => {
      return {
        summarize: jest.fn().mockRejectedValue(new Error("API error")),
      };
    });

    const summary = await summarizeWithBert("Some text");
    expect(summary).toBeNull();
  });
});
