import axios from 'axios';

// ================================ Design % Implementation =========================================
async function summarizeWithSMMRY(text) {
  const smmryApiKey = 'YOUR_SMMRY_API_KEY';
  const smmryUrl = 'https://api.smmry.com/';
  
  try {
    const response = await axios.post(smmryUrl, {
      smmry_api_key: smmryApiKey,
      smmry_text: text,
    });
    return response.data.sm_api_content;
  } catch (error) {
    console.error("Error summarizing with SMMRY:", error);
    return null;
  }
}

// Usage
const text = "John Doe, an experienced software developer, has a strong background in JavaScript and Node.js...";
summarizeWithSMMRY(text).then(console.log);

// ================================ Testing =========================================

import MockAdapter from 'axios-mock-adapter';

const mock = new MockAdapter(axios);

describe('summarizeWithSMMRY', () => {
  const mockSummary = "This is a summary generated by SMMRY.";

  beforeEach(() => {
    mock.reset();
  });

  it('should return a summary when provided with text', async () => {
    const text = "John Doe, an experienced software developer, has a strong background in JavaScript and Node.js...";

    mock.onPost('https://api.smmry.com/').reply(200, {
      sm_api_content: mockSummary
    });

    const summary = await summarizeWithSMMRY(text);
    expect(summary).toBe(mockSummary);
  });

  it('should handle errors gracefully', async () => {
    mock.onPost('https://api.smmry.com/').reply(500);

    const summary = await summarizeWithSMMRY("Some text");
    expect(summary).toBeNull();
  });
});
